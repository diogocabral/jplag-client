/*
 * University of Illinois/NCSA
 * Open Source License
 *
 * Copyright (c) 2012 University of Illinois at Urbana-Champaign.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal with the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimers.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimers in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the names of the CoMoTo Project team, the University of
 *       Illinois at Urbana-Champaign, nor the names of its contributors
 *       may be used to endorse or promote products derived from this
 *       Software without specific prior written permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package edu.illinois.cs.comoto.jplag.wsdl;

import com.sun.xml.rpc.client.HandlerChainImpl;
import com.sun.xml.rpc.client.ServiceExceptionImpl;
import com.sun.xml.rpc.util.exception.LocalizableExceptionAdapter;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerInfo;

public class JPlagService_Impl extends com.sun.xml.rpc.client.BasicService implements JPlagService {
    private static final QName serviceName = new QName("http://jplag.ipd.kit.edu/JPlagService", "JPlagService");
    private static final QName ns1_JPlagServicePort_QNAME = new QName("http://jplag.ipd.kit.edu/JPlagService", "JPlagServicePort");
    private static final Class JPlagTyp_PortClass = edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp.class;

    public JPlagService_Impl() {
        super(serviceName, new QName[]{
                ns1_JPlagServicePort_QNAME
        },
                new edu.illinois.cs.comoto.jplag.wsdl.JPlagService_SerializerRegistry().getRegistry());

        {
            java.util.List handlerInfos = new java.util.Vector();
            {
                java.util.Map props = new java.util.HashMap();
                javax.xml.namespace.QName[] headers = null;
                HandlerInfo handlerInfo = new HandlerInfo(edu.illinois.cs.comoto.jplag.util.JPlagClientAccessHandler.class, props, headers);
                handlerInfos.add(handlerInfo);
            }
            getHandlerRegistry().setHandlerChain(ns1_JPlagServicePort_QNAME, handlerInfos);
        }
    }

    public java.rmi.Remote getPort(javax.xml.namespace.QName portName, java.lang.Class serviceDefInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (portName.equals(ns1_JPlagServicePort_QNAME) &&
                    serviceDefInterface.equals(JPlagTyp_PortClass)) {
                return getJPlagServicePort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(portName, serviceDefInterface);
    }

    public java.rmi.Remote getPort(java.lang.Class serviceDefInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (serviceDefInterface.equals(JPlagTyp_PortClass)) {
                return getJPlagServicePort();
            }
        } catch (Exception e) {
            throw new ServiceExceptionImpl(new LocalizableExceptionAdapter(e));
        }
        return super.getPort(serviceDefInterface);
    }

    public edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp getJPlagServicePort() {
        java.lang.String[] roles = new java.lang.String[]{"http://schemas.xmlsoap.org/soap/actor/next"};
        HandlerChainImpl handlerChain = new HandlerChainImpl(getHandlerRegistry().getHandlerChain(ns1_JPlagServicePort_QNAME));
        handlerChain.setRoles(roles);
        edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_Stub stub = new edu.illinois.cs.comoto.jplag.wsdl.JPlagTyp_Stub(handlerChain);
        try {
            stub._initialize(super.internalTypeRegistry);
        } catch (JAXRPCException e) {
            throw e;
        } catch (Exception e) {
            throw new JAXRPCException(e.getMessage(), e);
        }
        return stub;
    }
}
