/*
 * University of Illinois/NCSA
 * Open Source License
 *
 * Copyright (c) 2012 University of Illinois at Urbana-Champaign.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal with the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimers.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimers in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the names of the CoMoTo Project team, the University of
 *       Illinois at Urbana-Champaign, nor the names of its contributors
 *       may be used to endorse or promote products derived from this
 *       Software without specific prior written permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package edu.illinois.cs.comoto.jplag.wsdl;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.literal.LiteralObjectSerializerBase;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.streaming.XMLReaderUtil;
import com.sun.xml.rpc.streaming.XMLWriter;

import javax.xml.namespace.QName;
import java.util.ArrayList;

public class RequestDataArray_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final javax.xml.namespace.QName ns1_items_QNAME = new QName("", "items");
    private static final javax.xml.namespace.QName ns3_RequestData_TYPE_QNAME = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "RequestData");
    private CombinedSerializer ns3_myRequestData_LiteralSerializer;

    public RequestDataArray_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle) {
        this(type, encodingStyle, false);
    }

    public RequestDataArray_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }

    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myRequestData_LiteralSerializer = (CombinedSerializer) registry.getSerializer("", edu.illinois.cs.comoto.jplag.wsdl.RequestData.class, ns3_RequestData_TYPE_QNAME);
    }

    public java.lang.Object doDeserialize(XMLReader reader,
                                          SOAPDeserializationContext context) throws java.lang.Exception {
        edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray instance = new edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray();
        java.lang.Object member = null;
        javax.xml.namespace.QName elementName;
        java.util.List values;
        java.lang.Object value;

        reader.nextElementContent();
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_items_QNAME))) {
            values = new ArrayList();
            for (; ; ) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_items_QNAME))) {
                    value = ns3_myRequestData_LiteralSerializer.deserialize(ns1_items_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new edu.illinois.cs.comoto.jplag.wsdl.RequestData[values.size()];
            member = values.toArray((Object[]) member);
            instance.setItems((edu.illinois.cs.comoto.jplag.wsdl.RequestData[]) member);
        } else {
            instance.setItems(new edu.illinois.cs.comoto.jplag.wsdl.RequestData[0]);
        }

        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object) instance;
    }

    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray instance = (edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray) obj;

    }

    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray instance = (edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray) obj;

        if (instance.getItems() != null) {
            for (int i = 0; i < instance.getItems().length; ++i) {
                ns3_myRequestData_LiteralSerializer.serialize(instance.getItems()[i], ns1_items_QNAME, null, writer, context);
            }
        }
    }
}
