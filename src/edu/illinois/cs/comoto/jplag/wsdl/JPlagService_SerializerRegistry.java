/*
 * University of Illinois/NCSA
 * Open Source License
 *
 * Copyright (c) 2012 University of Illinois at Urbana-Champaign.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal with the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimers.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimers in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the names of the CoMoTo Project team, the University of
 *       Illinois at Urbana-Champaign, nor the names of its contributors
 *       may be used to endorse or promote products derived from this
 *       Software without specific prior written permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 */

// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package edu.illinois.cs.comoto.jplag.wsdl;

import com.sun.xml.rpc.client.BasicService;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.SerializerConstants;
import com.sun.xml.rpc.encoding.SingletonDeserializerFactory;
import com.sun.xml.rpc.encoding.SingletonSerializerFactory;
import com.sun.xml.rpc.encoding.literal.LiteralSimpleTypeSerializer;
import com.sun.xml.rpc.encoding.simpletype.XSDBase64BinaryEncoder;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

import javax.xml.namespace.QName;
import javax.xml.rpc.encoding.Deserializer;
import javax.xml.rpc.encoding.Serializer;
import javax.xml.rpc.encoding.TypeMapping;
import javax.xml.rpc.encoding.TypeMappingRegistry;

public class JPlagService_SerializerRegistry implements SerializerConstants {
    public JPlagService_SerializerRegistry() {
    }

    public TypeMappingRegistry getRegistry() {

        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping12 = registry.getTypeMapping(SOAP12Constants.NS_SOAP_ENCODING);
        TypeMapping mapping = registry.getTypeMapping(SOAPConstants.NS_SOAP_ENCODING);
        TypeMapping mapping2 = registry.getTypeMapping("");
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "startSubmissionUploadParams");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.StartSubmissionUploadParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.StartSubmissionUploadParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "Option");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.Option_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.Option.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "Submission");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.Submission_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.Submission.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "MailTemplate");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.MailTemplate_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.MailTemplate.class, type, serializer);
        }
        {
            CombinedSerializer serializer = new LiteralSimpleTypeSerializer(SchemaConstants.QNAME_TYPE_BASE64_BINARY,
                    "", XSDBase64BinaryEncoder.getInstance());
            registerSerializer(mapping2, byte[].class, SchemaConstants.QNAME_TYPE_BASE64_BINARY, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "UserInfo");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.UserInfo_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.UserInfo.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "startResultDownloadData");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.StartResultDownloadData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.StartResultDownloadData.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "JPlagException");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.JPlagException_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.JPlagException.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "LanguageInfo");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.LanguageInfo_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.LanguageInfo.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "setMailTemplateParams");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.SetMailTemplateParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.SetMailTemplateParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "UserData");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.UserData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.UserData.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "setDeveloperStateParams");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.SetDeveloperStateParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.SetDeveloperStateParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "ServerInfo");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.ServerInfo_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.ServerInfo.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "Status");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.Status_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.Status.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "FinishRequestData");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.FinishRequestData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.FinishRequestData.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "MailTemplateArray");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.MailTemplateArray_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.MailTemplateArray.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "notifyDevelopersParams");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.NotifyDevelopersParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.NotifyDevelopersParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "updateUserInfoParams");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.UpdateUserInfoParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.UpdateUserInfoParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "RequestData");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.RequestData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.RequestData.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "UserDataArray");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.UserDataArray_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.UserDataArray.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "RequestDataArray");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.RequestDataArray.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "setUserDataParams");
            CombinedSerializer serializer = new edu.illinois.cs.comoto.jplag.wsdl.SetUserDataParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, edu.illinois.cs.comoto.jplag.wsdl.SetUserDataParams.class, type, serializer);
        }
        return registry;
    }

    private static void registerSerializer(TypeMapping mapping, java.lang.Class javaType, javax.xml.namespace.QName xmlType,
                                           Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
                new SingletonDeserializerFactory((Deserializer) ser));
    }

}
